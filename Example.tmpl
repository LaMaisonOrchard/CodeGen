////////////////////////////////////////////////////////////////
//
// This file describes and demonstrates the template syntax
//
// A template consists of a number of named text blocks. The 
// root or starting point for the template is the ROOT block.
// One block can insert the contents of another block by
// referencing it by name.
//

!BLK ROOT
The output starts here

This is the next block ![NEXT]!
This is another block
![SUBTYPE_BLOCK]!
!END

// The blocks have a short form as well which does not include
// the end of line

!BLK NEXT = <NEXT>

// A block name can have a subtype. The block with no subtype
// matches any sub type. It is a type of default or catch all
// block.

!BLK SUBTYPE_BLOCK
The use of subtype
![NAME1:fred]! = FRED
![NAME1:bill]! = BILL
![NAME1:harry]! = ANOTHER
![NAME1:lois]! = ANOTHER

![DO_NODE:start]!
!END

!BLK NAME1:fred = FRED
!BLK NAME1:bill = BILL
!BLK NAME1      = ANOTHER

// The input data is parse and produces a parse tree. The template
// works of the parse tree to generate the output specific to your
// data.
// The ROOT block is in the context or the root node of the parse
// tree and can use the blocks defined by the node in the parse
// tree. The blocks available are specific to the parse tree and
// the node in the parse tree. The parse tree is not documented
// here.

!BLK DO_NODE:start
This node is of class ![CLASS]!
![DO_NODE:full]!

![FURTHER-BLOCKS:file]!
!END

// The parse tree can be traversed using the USING, FOREACH and LIST
// references.
//
// USING   switches to a named sub-node and inserts a block in that
//         context. The special case USING PREV switches to the
//         previous node that was used.
//
// FOREACH traversed a names list of sub-nodes and inserts a block
//         in the context of each sub-node. The special case FOREACH
//         LEAF traverses the leaf nodes of a hiearchy of named
//         sub-nodes.
//
// LIST    is the same as FOREACH except it inserts a piece of text
//         between each entry allowing lists to be generated. 

!BLK COMMA=, 

!BLK DO_NODE:full
![LIST ENTRY (COMMA) CLASS]!
![FOREACH ENTRY DO_NODE:entry]!
!END  

!BLK DO_NODE:entry
This node is of class ![CLASS]!
![USING BILL DO_NODE:bill]!
!END 

!BLK DO_NODE:bill
This node is of class ![CLASS]!
LOIS = ![LOIS]!
!END

// There a special block type FIL that defines a file that the block is
// written to. There are laso two special names 'null' and 'stdout' that
// refer to the null output and the standard output.

!FIL FURTHER-BLOCKS:file out.txt
This is a text file
![FURTHER-BLOCKS:null]!!END

!FIL FURTHER-BLOCKS:null null
This text is just discarded and go no where
![FURTHER-BLOCKS:std]!
Just discard me
!END
!FIL FURTHER-BLOCKS:std stdout
We are now back to standard output
![TABS]!
!END

// Block references and other fields can be built from blocks as well
// as in the case of COMMA in the LIST reference above.
//
// There is one remaining block type that relates to two remaining reference
// type. The EVAL block takes the block text and evaluates it as an integer
// expression. By default the block produces a string representing the decimal
// integer value. The COL and TAB references take an integer value and adds
// spaces until the column reachs the column position (COL) or the tab
// position (TAB)

!BLK TAB_SIZE = 4

!EVAL COLUMN
![TAB_SIZE]! * 5
!END

!BLK TABS

Examples of TAB and COL
0123456789![COL (COLUMN)]!<<<
0123456789![TAB (TAB_SIZE)]!<<<
0123456789![COL 20]!<<<
0123456789![TAB 4]!<<<
!END



